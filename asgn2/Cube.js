let cubeArray = [ // first cube is blender cube, from -1 to 1 with each edge length 2
    -1, -1,  1,   1,  1,  1,   1, -1,  1,
    -1, -1,  1,  -1,  1,  1,   1,  1,  1,
    -1, -1, -1,   1, -1, -1,   1,  1, -1,
    -1, -1, -1,   1,  1, -1,  -1,  1, -1,
    -1,  1, -1,   1,  1, -1,   1,  1,  1,
    -1,  1, -1,   1,  1,  1,  -1,  1,  1,
    -1, -1, -1,   1, -1,  1,   1, -1, -1,
    -1, -1, -1,  -1, -1,  1,   1, -1,  1,
     1, -1, -1,   1, -1,  1,   1,  1,  1,
     1, -1, -1,   1,  1,  1,   1,  1, -1,
    -1, -1, -1,  -1,  1,  1,  -1, -1,  1,
    -1, -1, -1,  -1,  1, -1,  -1,  1,  1,

    0, -0.5,  0.5,   1,  0.5,  0.5,   1, -0.5,  0.5, // second cube is cube from 0 to 1 on x, then -0.5 to 0.5 on all other axis
    0, -0.5,  0.5,   0,  0.5,  0.5,   1,  0.5,  0.5,
    0, -0.5, -0.5,   1, -0.5, -0.5,   1,  0.5, -0.5,
    0, -0.5, -0.5,   1,  0.5, -0.5,   0,  0.5, -0.5,
    0,  0.5, -0.5,   1,  0.5, -0.5,   1,  0.5,  0.5,
    0,  0.5, -0.5,   1,  0.5,  0.5,   0,  0.5,  0.5,
    0, -0.5, -0.5,   1, -0.5,  0.5,   1, -0.5, -0.5,
    0, -0.5, -0.5,   0, -0.5,  0.5,   1, -0.5,  0.5,
    1, -0.5, -0.5,   1, -0.5,  0.5,   1,  0.5,  0.5,
    1, -0.5, -0.5,   1,  0.5,  0.5,   1,  0.5, -0.5,
    0, -0.5, -0.5,   0,  0.5,  0.5,   0, -0.5,  0.5,
    0, -0.5, -0.5,   0,  0.5, -0.5,   0,  0.5,  0.5,

    1, 0, 0,   0.71, 0, 0.71,   0.71, 1, 0.71, 
    1, 0, 0,   0.71, 1, 0.71,   1, 1, 0, 
    0.71, 0, 0.71,   0, 0, 1,   0, 1, 1, 
    0.71, 0, 0.71,   0, 1, 1,   0.71, 1, 0.71, 
    0, 0, 1,   -0.71, 0, 0.71,   -0.71, 1, 0.71, 
    0, 0, 1,   -0.71, 1, 0.71,   0, 1, 1, 
    -0.71, 0, 0.71,   -1, 0, 0,   -1, 1, 0, 
    -0.71, 0, 0.71,   -1, 1, 0,   -0.71, 1, 0.71, 
    -1, 0, 0,   -0.71, 0, -0.71,   -0.71, 1, -0.71, 
    -1, 0, 0,   -0.71, 1, -0.71,   -1, 1, 0, 
    -0.71, 0, -0.71,   0, 0, -1,   0, 1, -1, 
    -0.71, 0, -0.71,   0, 1, -1,   -0.71, 1, -0.71, 
    0, 0, -1,   0.71, 0, -0.71,   0.71, 1, -0.71, 
    0, 0, -1,   0.71, 1, -0.71,   0, 1, -1, 
    0.71, 0, -0.71,   1, 0, 0,   1, 1, 0, 
    0.71, 0, -0.71,   1, 1, 0,   0.71, 1, -0.71, 
    0, 1, 0,   0.71, 1, 0.71,   0, 1, 1, 
    0, 1, 0,   0, 1, 1,   -0.71, 1, 0.71, 
    0, 1, 0,   -0.71, 1, 0.71,   -1, 1, 0, 
    0, 1, 0,   -1, 1, 0,   -0.71, 1, -0.71, 
    0, 1, 0,   -0.71, 1, -0.71,   0, 1, -1, 
    0, 1, 0,   0, 1, -1,   0.71, 1, -0.71, 
    0, 1, 0,   0.71, 1, -0.71,   1, 1, 0, 
    0, 0, 0,   0, 0, 1,   0.71, 0, 0.71, 
    0, 0, 0,   -0.71, 0, 0.71,   0, 0, 1, 
    0, 0, 0,   -1, 0, 0,   -0.71, 0, 0.71, 
    0, 0, 0,   -0.71, 0, -0.71,   -1, 0, 0, 
    0, 0, 0,   0, 0, -1,   -0.71, 0, -0.71, 
    0, 0, 0,   0.71, 0, -0.71,   0, 0, -1, 
    0, 0, 0,   1, 0, 0,   0.71, 0, -0.71, 
    0, 0, 0,   0.71, 0, 0.71,   1, 0, 0,
    0, 1, 0,   1, 1, 0,         0.71, 1, 0.71 // 8-segmented cylinder
];

let cubeVertices = null;

class Cube {
    constructor() {
        this.m_color = [1.0, 1.0, 1.0, 1.0];
        this.m_matrix = new Matrix4();
    }
  
    render() {
        drawCube(this.m_matrix, this.m_color);
    }
}

function drawCube(m) {
    gl.uniformMatrix4fv(u_ModelMatrix, false, m.elements);
    gl.drawArrays(gl.TRIANGLES, 0, 36);
}

function drawAltCube(m) {
    gl.uniformMatrix4fv(u_ModelMatrix, false, m.elements);
    gl.drawArrays(gl.TRIANGLES, 36, 36);
}

function drawIcoSphere(m) {
    gl.uniformMatrix4fv(u_ModelMatrix, false, m.elements);
    gl.drawArrays(gl.TRIANGLES, 168, 60);
}

function drawCylinder(m) {
    gl.uniformMatrix4fv(u_ModelMatrix, false, m.elements);
    gl.drawArrays(gl.TRIANGLES, 72, 96);
}